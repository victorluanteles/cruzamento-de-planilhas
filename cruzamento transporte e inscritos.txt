import pandas as pd
import unicodedata
import re
# Caminho para o arquivo Excel
caminho_arquivo1 = 'C:\\Users\\victor.oliveira\\Downloads\\Programa de estágio Regular 2024 _ 2º Semestre 3 (53).xlsx'
caminho_arquivo2 = 'C:\\Users\\victor.oliveira\\Downloads\\Base de dados inscritos REGULAR 2º Semestre (64).xlsx'

# Lendo o arquivo Excel e transformando em um DataFrame
dados_forms = pd.read_excel(caminho_arquivo1)
dados_inscritos = pd.read_excel(caminho_arquivo2, sheet_name='INSCRITOS')
def formatar_valor(valor):
    # Remover pontos e traços
    valor_sem_pontos = str(valor).replace(".", "").replace("-", "").replace("+", "")
    # Converter para número
    valor_numerico = int(valor_sem_pontos)
    # Formatar como string com zeros à esquerda
    valor_formatado = f"{int(valor_numerico):011d}"
    return valor_formatado

def remover_nao_numericos(valor):
    # Manter apenas os números
    valor_formatado = ''.join(filter(str.isdigit, str(valor)))
    return valor_formatado

def remover_acentos(texto):
    # Verifica se o valor é nulo para evitar erros
    if pd.isnull(texto):
        return texto

    # Normaliza o texto (remove acentos)
    nfkd = unicodedata.normalize('NFKD', texto)
    palavra_sem_acentos = ''.join([c for c in nfkd if not unicodedata.combining(c)])

    # Usa expressão regular para manter apenas letras, números e espaços
    return re.sub(r'[^a-zA-Z0-9 ]', '', palavra_sem_acentos)


dados_forms.rename(columns={"Nome completo?": 'NOMEFORMS'}, inplace=True)
dados_forms.rename(columns={"Qual seu CPF? ": 'CPFFORMS'}, inplace=True)
dados_forms.rename(columns={"Valorizamos o direito de cada indivíduo de expressar sua identidade de maneira autêntica. Embora estejamos interessados em conhecê-lo(a) melhor, é importante destacar que quaisquer informações forneci": 'Genero'}, inplace=True)








# Aplicar a função apenas nos valores que não são NaN
dados_forms['CPF_formatado1'] = dados_forms['CPFFORMS'].apply(lambda x: formatar_valor(x) if pd.notna(x) else '')

dados_forms['NOME_arrumado1'] = dados_forms['NOMEFORMS'].str.strip().str.upper()

print(dados_forms[['CPF_formatado1', 'CPFFORMS']])


dados_inscritos['CPF_formatado2'] = dados_inscritos['CPF'].apply(formatar_valor)
dados_inscritos['NOME_arrumado2'] = dados_inscritos['NOME'].str.strip().str.upper()


dados_forms.rename(columns={"Qual o complemento? ": 'Complemento'}, inplace=True)
dados_forms.rename(columns={"Estado de residência?": 'Estado'}, inplace=True)

colunas_desejadas_transporte = ["NOMEFORMS", "CPF_formatado1", "NOME_arrumado1", "Hora de conclusão",
                                "Qual o seu país?", "Endereço de residência?", "Complemento","Cidade de residência?","Estado", "Número da sua residência?","E o seu bairro de residência?","Data de nascimento?","Você possui algum tipo de deficiência?","Se sim, descreva sua deficiência.","Grau de escolaridade?", "CPFFORMS","Nome completo da mãe?","Qual seu documento de identidade (RG)?","Genero","Estado civil?"]

dados_selecionados_transporte = dados_forms[colunas_desejadas_transporte]

colunas_desejadas_inscritos = ["CPF","NOME","CPF_formatado2","NOME_arrumado2","CURSO","DG | AVALIAÇÃO","EMAIL","ETNIA","CEP","CEP.1","TELEFONE","VÍNCULO STELLANTIS","EMPRESA TERCEIRA","ID SAP","REGIÃO"]
dados_selecionados_inscritos = dados_inscritos[colunas_desejadas_inscritos]

dados_completos_join_cpf = pd.merge(dados_selecionados_transporte, dados_selecionados_inscritos, left_on='CPF_formatado1', right_on='CPF_formatado2', how='left')

dados_completos = pd.merge(dados_completos_join_cpf, dados_selecionados_inscritos, left_on='NOME_arrumado1', right_on='NOME_arrumado2', how='left')


print(dados_completos)

dados_completos['REGIÃO_z'] = dados_completos['REGIÃO_x'].fillna(dados_completos['REGIÃO_y'])
dados_completos['NOME_z'] = dados_completos['NOME_x'].fillna(dados_completos['NOME_y'])
dados_completos['CURSO_z'] = dados_completos['CURSO_x'].fillna(dados_completos['CURSO_y'])
dados_completos['DG | AVALIAÇÃO_z'] = dados_completos['DG | AVALIAÇÃO_x'].fillna(dados_completos['DG | AVALIAÇÃO_y'])
dados_completos['EMAIL_z'] = dados_completos['EMAIL_x'].fillna(dados_completos['EMAIL_y'])
dados_completos['ETINIA_z'] = dados_completos['ETNIA_x'].fillna(dados_completos['ETNIA_y'])
dados_completos['CEP.1_z'] = dados_completos['CEP.1_x'].fillna(dados_completos['CEP.1_y'])
dados_completos['TELEFONE_z'] = dados_completos['TELEFONE_x'].fillna(dados_completos['TELEFONE_y'])

dados_completos['VÍNCULO STELLANTIS_z'] = dados_completos['VÍNCULO STELLANTIS_x'].fillna(dados_completos['VÍNCULO STELLANTIS_y'])
dados_completos['EMPRESA TERCEIRA_z'] = dados_completos['EMPRESA TERCEIRA_x'].fillna(dados_completos['EMPRESA TERCEIRA_y'])
dados_completos['ID SAP_z'] = dados_completos['ID SAP_x'].fillna(dados_completos['ID SAP_y'])

# Exemplo de substituição tratamento de dados
dados_completos['Você possui algum tipo de deficiência?'] = dados_completos['Você possui algum tipo de deficiência?'].replace({'Sim': 'S', 'Não': 'N'})

dados_completos['Se sim, descreva sua deficiência.'] = dados_completos['Você possui algum tipo de deficiência?'].apply(
    lambda x: 7 if x == 'S' else ''
)
#DEVE SER ALTERADO SEMPRE DE ACORDO COM O PROJETO
dados_completos['Grau de escolaridade?'] = 22

dados_completos['Qual o seu país?'] = 1


dados_completos['ETINIA_z'] = dados_completos['ETINIA_z'].replace({
    'Branca': '1',
    'Parda': '4',
    'Preta': '2',
    'Amarela': '3',
    'Indígena': '5',
    'Prefiro não responder': '0'
})

dados_completos['Estado civil?'] = dados_completos['Estado civil?'].replace({
    'Solteiro(a)': '1',
    'Casado(a)': '2',
    'Divorciado(a)': '3',
    'Viúvo(a)': '4',
    'Separado(a)': '6'
})

dados_completos['CEP.1_z'] = dados_completos['CEP.1_z'].apply(remover_nao_numericos)

dados_completos['Cidade de residência?'] = dados_completos['Cidade de residência?'].apply(remover_acentos).str.upper()

colunas_desejadas = ["NOMEFORMS","EMAIL_z","Qual o seu país?", "Endereço de residência?", "Complemento", "Estado", "Número da sua residência?","E o seu bairro de residência?","Cidade de residência?","CEP.1_z","Data de nascimento?","ETINIA_z","Você possui algum tipo de deficiência?","Se sim, descreva sua deficiência.","Grau de escolaridade?", "CPF_formatado1", "Nome completo da mãe?","Qual seu documento de identidade (RG)?","TELEFONE_z","Genero","Estado civil?","VÍNCULO STELLANTIS_z","EMPRESA TERCEIRA_z","ID SAP_z","Hora de conclusão","NOME_z","EMAIL_z","DG | AVALIAÇÃO_z","REGIÃO_z"]
dados_selecionados = dados_completos[colunas_desejadas]

nome_arquivo1 = "extracaoexcel\\extracao.xlsx"
dados_completos.to_excel(nome_arquivo1, index=False)
print(f"Dados salvos em '{nome_arquivo1}'")

# Extrair apenas os valores "Aprovado(a)" ou "Stand by" do campo "DG | AVALIAÇÃO_z"
dados_filtrados = dados_selecionados[dados_selecionados['DG | AVALIAÇÃO_z'].isin(['Aprovado(a)', 'Stand by', 'Destaque'])]

# Salvar os dados filtrados em um novo arquivo Excel
nome_arquivo_filtrado = "extracaoexcel\\dados_filtrados_regular.xlsx"
dados_filtrados.to_excel(nome_arquivo_filtrado, index=False)

print(f"Dados filtrados salvos em '{nome_arquivo_filtrado}'")

nome_arquivo3 = "extracaoexcel\\selecionados_forms_regular.xlsx"
dados_selecionados.to_excel(nome_arquivo3, index=False)
print(f"Dados salvos em '{nome_arquivo3}'")

